{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","initialMovie","urlRegex","initialMovieErrors","NewMovie","onAdd","useState","newMovie","setNewMovie","newMovieErrors","setNewMovieErrors","handleNewMovieChange","useCallback","event","target","name","value","prev","handleNewMovieBlur","formIsValid","useMemo","Object","values","every","error","validateUrl","key","errorMessage","test","onSubmit","preventDefault","type","classNames","placeholder","onBlur","onChange","disabled","App","state","moviesFromServer","addMovie","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e6e5f2d.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport {\n  ChangeEvent,\n  FocusEvent,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (obj: Movie) => void;\n};\n\nconst initialMovie: Movie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\n// eslint-disable-next-line\n const urlRegex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\ntype NewMovieError = {\n  [key in keyof Omit<Movie, 'description'>]: null | string;\n};\n\nconst initialMovieErrors: NewMovieError = {\n  title: null,\n  imgUrl: null,\n  imdbUrl: null,\n  imdbId: null,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [newMovie, setNewMovie] = useState<Movie>(initialMovie);\n  const [newMovieErrors, setNewMovieErrors] = useState<NewMovieError>(\n    initialMovieErrors,\n  );\n\n  const handleNewMovieChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const { name, value } = event.target;\n\n      setNewMovie((prev) => ({\n        ...prev,\n        [name]: value,\n      }));\n    },\n    [],\n  );\n\n  const handleNewMovieBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => {\n      const { name, value } = event.target;\n\n      switch (name) {\n        case 'title':\n        case 'imdbId':\n          if (!value) {\n            setNewMovieErrors((prev) => ({\n              ...prev,\n              [name]: `${name} is required`,\n            }));\n          } else {\n            setNewMovieErrors((prev) => ({\n              ...prev,\n              [name]: null,\n            }));\n          }\n\n          break;\n        default:\n      }\n    },\n    [],\n  );\n\n  const formIsValid = useMemo(() => {\n    return Object.values(newMovieErrors)\n      .every((error) => error === null);\n  }, [newMovieErrors]);\n\n  const validateUrl = (key: keyof Movie) => {\n    let errorMessage = initialMovieErrors.imgUrl;\n\n    if (!newMovie[key]) {\n      errorMessage = `${key} is required!`;\n    } else if (!urlRegex.test(newMovie[key])) {\n      errorMessage = 'Please enter valid URL!';\n    }\n\n    setNewMovieErrors({\n      ...newMovieErrors,\n      [key]: errorMessage,\n    });\n  };\n\n  return (\n    <form\n      className=\"form\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (!formIsValid) {\n          return;\n        }\n\n        onAdd(newMovie);\n        setNewMovie(initialMovie);\n        setNewMovieErrors(initialMovieErrors);\n      }}\n    >\n      <input\n        type=\"text\"\n        className={\n          classNames(\n            'form__input',\n            { 'form__input--error': newMovieErrors.title },\n          )\n        }\n        name=\"title\"\n        placeholder=\"Title\"\n        value={newMovie.title}\n        onBlur={handleNewMovieBlur}\n        onChange={handleNewMovieChange}\n      />\n      <p className=\"form__error\">\n        {newMovieErrors.title}\n      </p>\n\n      <input\n        type=\"text\"\n        className=\"form__input\"\n        name=\"description\"\n        placeholder=\"Description\"\n        value={newMovie.description}\n        onChange={handleNewMovieChange}\n      />\n\n      <input\n        type=\"text\"\n        className={\n          classNames(\n            'form__input',\n            { 'form__input--error': newMovieErrors.imgUrl },\n          )\n        }\n        name=\"imgUrl\"\n        placeholder=\"ImgUrl\"\n        value={newMovie.imgUrl}\n        onBlur={() => validateUrl('imgUrl')}\n        onChange={handleNewMovieChange}\n      />\n      <p className=\"form__error\">\n        {newMovieErrors.imgUrl}\n      </p>\n\n      <input\n        type=\"text\"\n        className={\n          classNames(\n            'form__input',\n            { 'form__input--error': newMovieErrors.imdbUrl },\n          )\n        }\n        name=\"imdbUrl\"\n        placeholder=\"ImdbUrl\"\n        value={newMovie.imdbUrl}\n        onBlur={() => validateUrl('imdbUrl')}\n        onChange={handleNewMovieChange}\n      />\n      <p className=\"form__error\">\n        {newMovieErrors.imdbUrl}\n      </p>\n\n      <input\n        type=\"text\"\n        className={\n          classNames(\n            'form__input',\n            { 'form__input--error': newMovieErrors.imdbId },\n          )\n        }\n        name=\"imdbId\"\n        placeholder=\"ImdbId\"\n        value={newMovie.imdbId}\n        onBlur={handleNewMovieBlur}\n        onChange={handleNewMovieChange}\n      />\n      <p className=\"form__error\">\n        {newMovieErrors.imdbId}\n      </p>\n\n      <button\n        type=\"submit\"\n        disabled={!formIsValid}\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => {\n      return {\n        movies: [\n          ...state.movies,\n          movie,\n        ],\n      };\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}